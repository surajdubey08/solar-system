name: Solar System Workflow

on:
  workflow_dispatch: 
  push:
    branches:
      - main
      - 'feature/*'

env:
  REGISTRY: ghcr.io
  MONGO_URI: 'mongodb+srv://supercluster.d83jj.mongodb.net/superData'
  MONGO_USERNAME: ${{vars.MONGO_USERNAME}}
  MONGO_PASSWORD: ${{secrets.MONGO_PASSWORD}}

jobs:
  unit-testing:
    name: Unit Testing
    services:
      mongo-db:
        image: siddharth67/mongo-db:non-prod
        ports:
          - 27017:27017
    env:
      MONGO_URI: 'mongodb://localhost:27017/superData'
      MONGO_USERNAME: ${{vars.MONGO_SERVICE_CONTAINER_USERNAME}}
      MONGO_PASSWORD: ${{secrets.MONGO_SERVICE_CONTAINER_PASSWORD}}
    strategy:
      matrix:
        nodejs_version: [18, 20]
        # operating_system: [ubuntu-latest, macos-latest]
        operating_system: [ubuntu-latest]
        # exclude:
        #   - nodejs_version: 18
        #     operating_system: macos-latest
    runs-on: ${{ matrix.operating_system}}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup NodeJS Version - ${{matrix.nodejs_version}}
        uses: actions/setup-node@v4
        with:
          node-version: ${{matrix.nodejs_version}}

      - name: Cache NPM Dependencies
        uses: actions/cache@v4
        with:
          path: node_modules
          key: ${{ runner.os }}-node-modules-${{ hashFiles('package-lock.json') }}

      - name: Install Dependencies
        run: npm install

      - name: Unit Testing
        run: npm test

      - name: Archive Test Result
        uses: actions/upload-artifact@v4
        with:
          name: Mocha-Test-Result - ${{ matrix.operating_system}} - ${{matrix.nodejs_version}}
          path: test-results.xml
          retention-days: 2

  code-coverage:
    name: Code Coverage
    container:
      image: node:18
    services:
      mongo-db:
        image: siddharth67/mongo-db:non-prod
        options:
          --name mongo
    env:
      MONGO_URI: 'mongodb://mongo:27017/superData'
      MONGO_USERNAME: ${{vars.MONGO_SERVICE_CONTAINER_USERNAME}}
      MONGO_PASSWORD: ${{secrets.MONGO_SERVICE_CONTAINER_PASSWORD}}
    runs-on: ubuntu-latest
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
       
    - name: Cache NPM Dependencies
      uses: actions/cache@v4
      with:
        path: node_modules
        key: ${{ runner.os }}-node-modules-${{ hashFiles('package-lock.json') }}

    - name: Install Dependencies
      run: npm install

    - name: Check Code Coverage
      continue-on-error: true
      id: code-coverage-step
      run: npm run coverage

    - name: Archive Test Result
      # if: always()
      uses: actions/upload-artifact@v4
      with:
        name: Code-Coverage-Result
        path: coverage
        retention-days: 3

  image-build-and-push:
    name: Containerization
    needs: [unit-testing, code-coverage]
    runs-on: ubuntu-latest
    permissions:
      packages: write
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Image Build
        uses: docker/build-push-action@v6
        with:
          context: .
          push: false
          tags: ${{ github.actor }}/solar-system:${{github.run_id}}

      - name: Image Testing
        run: |
          docker images
          docker run --name solar-system-app -d \
            -p 3000:3000 \
            -e MONGO_URI=$MONGO_URI \
            -e MONGO_USERNAME=$MONGO_USERNAME \
            -e MONGO_PASSWORD=$MONGO_PASSWORD \
            ${{ github.actor }}/solar-system:${{github.run_id}}

          export IP=$(docker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' solar-system-app)
          echo $IP

          echo 'Testing Image URL using wget'
          wget -q -O - 127.0.0.1:3000/live | grep live

      - name: Image Push to GHCR
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: ${{ env.REGISTRY }}/${{ github.actor }}/solar-system:${{github.run_id}}

  dev-deploy:
    if: contains(github.ref, 'feature/')
    needs: image-build-and-push
    runs-on: ubuntu-latest
    environment: 
      name: DEVELOPMENT
      url: https://${{steps.set-ingress-host-address.outputs.APP_INGRESS_HOST}}
    outputs:
      APP_INGRESS_URL: ${{steps.set-ingress-host-address.outputs.APP_INGRESS_HOST}}
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
    
    - name: Install kubectl
      uses: azure/setup-kubectl@v4
      with:
        version: latest

    - name: Set Kubeconfig
      uses: azure/k8s-set-context@v4
      with:
        method: kubeconfig
        kubeconfig: ${{secrets.KUBECONFIG_K8SCLUSTER_SURAJ}}

    - name: Fetch K8s Cluster Details
      run: |
        kubectl version
        echo --------------------------------------------
        kubectl get nodes

    - name: Save NGINX Ingress Controller IP
      run: |
          echo "INGRESS_IP=$(kubectl -n ingress-nginx get services ingress-nginx-controller -o jsonpath="{.status.loadBalancer.ingress[0].ip}")" >> $GITHUB_ENV

    - name: Replace Placeholders in Manifest Files
      uses: cschleiden/replace-tokens@v1
      with:
        tokenPrefix: '__'
        tokenSuffix: '__'
        files: '["kubernetes/development/*.yaml"]'
      env:
        NAMESPACE: ${{vars.NAMESPACE}}
        REPLICAS: ${{vars.REPLICAS}}
        IMAGE: ${{ env.REGISTRY }}/${{ github.actor }}/solar-system:${{github.run_id}}
        INGRESS_IP: ${{env.INGRESS_IP}}

    - name: Check Manifest Files
      run: |
        for file in kubernetes/development/*.yaml; do
          echo "--- $file ---"
          cat "$file"
          echo ""
        done

    - name: Create Development Namespace
      run: kubectl create namespace ${{vars.NAMESPACE}} --dry-run=client -o yaml | kubectl apply -f -

    - name: Create MongoDB Secret
      run: |
        kubectl -n ${{vars.NAMESPACE}} create secret generic mongo-db-creds \
        --from-literal=MONGO_URI=${{env.MONGO_URI}} \
        --from-literal=MONGO_USERNAME=${{vars.MONGO_USERNAME}} \
        --from-literal=MONGO_PASSWORD=${{secrets.MONGO_PASSWORD}} \
        --save-config \
        --dry-run=client \
        -o yaml | kubectl apply -f -

    - name: Deploy to DEV Env
      run: |
        kubectl apply -f kubernetes/development

    - name: Set Application Ingress Host URL
      id: set-ingress-host-address
      run: |
        echo "APP_INGRESS_HOST=$(kubectl get ingress -n ${{vars.NAMESPACE}} -o jsonpath="{.items[0].spec.tls[0].hosts[0]}")" >> $GITHUB_OUTPUT

  dev-integration-testing:
    if: contains(github.ref, 'feature/')
    name: Dev Implementation Testing
    needs: dev-deploy
    runs-on: ubuntu-latest
    steps:
   
    - name: Test URL Output using curl and jq
      env:
        INGRESS_HOST: ${{needs.dev-deploy.outputs.APP_INGRESS_URL}}
      run: |
        echo $INGRESS_HOST
        echo "-----------------------------------"
        curl -s -k https://$INGRESS_HOST/live | jq -r .status | grep -i live

  prod-deploy:
    if: github.ref == 'refs/heads/main'
    needs: image-build-and-push
    runs-on: ubuntu-latest
    environment: 
      name: PRODUCTION
      url: https://${{steps.set-ingress-host-address.outputs.APP_INGRESS_HOST}}
    outputs:
      APP_INGRESS_URL: ${{steps.set-ingress-host-address.outputs.APP_INGRESS_HOST}}
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
    
    - name: Install kubectl
      uses: azure/setup-kubectl@v4
      with:
        version: latest

    - name: Set Kubeconfig
      uses: azure/k8s-set-context@v4
      with:
        method: kubeconfig
        kubeconfig: ${{secrets.KUBECONFIG_K8SCLUSTER_SURAJ}}

    - name: Fetch K8s Cluster Details
      run: |
        kubectl version
        echo --------------------------------------------
        kubectl get nodes

    - name: Save NGINX Ingress Controller IP
      run: |
          echo "INGRESS_IP=$(kubectl -n ingress-nginx get services ingress-nginx-controller -o jsonpath="{.status.loadBalancer.ingress[0].ip}")" >> $GITHUB_ENV

    - name: Replace Placeholders in Manifest Files
      uses: cschleiden/replace-tokens@v1
      with:
        tokenPrefix: '__'
        tokenSuffix: '__'
        files: '["kubernetes/production/*.yaml"]'
      env:
        NAMESPACE: ${{vars.NAMESPACE}}
        REPLICAS: ${{vars.REPLICAS}}
        IMAGE: ${{ env.REGISTRY }}/${{ github.actor }}/solar-system:${{github.run_id}}
        INGRESS_IP: ${{env.INGRESS_IP}}

    - name: Check Manifest Files
      run: |
        for file in kubernetes/production/*.yaml; do
          echo "--- $file ---"
          cat "$file"
          echo ""
        done

    - name: Create Production Namespace
      run: kubectl create namespace ${{vars.NAMESPACE}} --dry-run=client -o yaml | kubectl apply -f -

    - name: Create MongoDB Secret
      run: |
        kubectl -n ${{vars.NAMESPACE}} create secret generic mongo-db-creds \
        --from-literal=MONGO_URI=${{env.MONGO_URI}} \
        --from-literal=MONGO_USERNAME=${{vars.MONGO_USERNAME}} \
        --from-literal=MONGO_PASSWORD=${{secrets.MONGO_PASSWORD}} \
        --save-config \
        --dry-run=client \
        -o yaml | kubectl apply -f -

    - name: Deploy to PROD Env
      run: |
        kubectl apply -f kubernetes/production

    - name: Set Application Ingress Host URL
      id: set-ingress-host-address
      run: |
        echo "APP_INGRESS_HOST=$(kubectl get ingress -n ${{vars.NAMESPACE}} -o jsonpath="{.items[0].spec.tls[0].hosts[0]}")" >> $GITHUB_OUTPUT

  prod-integration-testing:
    if: github.ref == 'refs/heads/main'
    name: Prod Implementation Testing
    needs: prod-deploy
    runs-on: ubuntu-latest
    steps:
    
    - name: Test URL Output using curl and jq
      env:
        INGRESS_HOST: ${{needs.prod-deploy.outputs.APP_INGRESS_URL}}
      run: |
        echo $INGRESS_HOST
        echo "-----------------------------------"
        curl -s -k https://$INGRESS_HOST/live | jq -r .status | grep -i live
